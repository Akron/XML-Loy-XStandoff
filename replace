example/files/meta.xml:2:<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
example/b-01.pl:9:my $cd = XML::Loy::XStandoff->new('corpusData');
example/b-01.pl:12:$cd->textual_content('The sun shines brighter.');
example/b-01.pl:15:my $seg = $cd->segmentation;
example/b-01.pl:18:my $seg1 = $seg->segment(0,24);
example/b-01.pl:19:my $seg2 = $seg->segment(0, 3);
example/b-01.pl:20:my $seg3 = $seg->segment(4, 7);
example/b-01.pl:21:my $seg4 = $seg->segment(8, 13);
example/b-01.pl:22:my $seg5 = $seg->segment(13, 14);
example/b-01.pl:23:my $seg6 = $seg->segment(15, 21);
example/b-01.pl:24:my $seg7 = $seg->segment(21, 23);
example/b-01.pl:26:print $cd->to_pretty_xml;
example/b-01.pl:30:say $seg->segment($seg3)->segment_content;
example/b-01.pl:34:$seg->segment($seg3)->segment_content('moon');
example/b-01.pl:37:$seg->segment($seg7)->segment_content( sub {
example/b-01.pl:44:say $cd->textual_content;
example/b-01.pl:48:for ($seg->segment($seg6)) {
example/b-01.pl:49:  say $_->attrs('start'); # 16
example/b-01.pl:50:  say $_->attrs('end');   # 22
example/05.pl:6:my $cd = XML::Loy::XStandoff->new('corpusData');
example/05.pl:9:$cd->meta(uri => 'files/meta.xml');
example/05.pl:12:my $meta = $cd->meta(as => [-Loy, -DublinCore]);
example/05.pl:14:print $meta->to_pretty_xml;
example/05.pl:17:print $meta->at('Description')->dc('title');
example/04.pl:6:my $corpus = XML::Loy::XStandoff->new('corpus');
example/04.pl:9:my $cd = $corpus->corpus_data(id => 'my-corpus-data');
example/04.pl:10:my $pd = $cd->primary_data(id => 'my-primary-data');
example/04.pl:14:$pd->textual_content('Give me the hammer!');
example/04.pl:17:my $seg1 = $pd->segment(0, 19);
example/04.pl:18:my $seg2 = $pd->segment(0, 4);
example/04.pl:19:my $seg3 = $pd->segment(5, 7);
example/04.pl:20:my $seg4 = $pd->segment(8, 11);
example/04.pl:21:my $seg5 = $pd->segment(12, 18);
example/04.pl:23:# print $corpus->to_pretty_xml;
example/04.pl:26:print $pd->segment($seg3)->segment_content;
example/04.pl:30:$pd->segment($seg3)->segment_content('him');
example/04.pl:33:$pd->segment($seg5)->segment_content(
example/04.pl:39:print $pd->textual_content;
example/04.pl:43:print $pd->segment($seg5)->segment_content;
example/07.pl:6:my $corpus = XML::Loy::XStandoff->new('corpus');
example/07.pl:7:my $doc = $corpus->textual_content('Give me the hammer!');
example/07.pl:8:$corpus->segmentation;
example/07.pl:9:my $data = $corpus->layer->extension('-AnaWiki::DocumentStructure');
example/07.pl:10:my $s = $data->ds_para->ds_sentence;
example/07.pl:12:foreach ($doc->extension('-XStandoff::Tokenizer')->tokenize) {
example/07.pl:13:  $s->ds_word({lemma => lc $_->[0]})->seg($_->[1]);
example/07.pl:17:$corpus->extension('-Schema::Validator');
example/07.pl:23:print $corpus->validate($loc) ? 'valid' : 'invalid';
example/07.pl:25:$corpus->segmentation->add('wrongElement');
example/07.pl:28:print $corpus->validate($loc) ? 'valid' : 'invalid';
example/b-02.pl:8:my $doc = XML::Loy::Example::Morphemes->new('document');
example/b-02.pl:10:my $m = $doc->morphemes;
example/b-02.pl:12:$m->morpheme('The');
example/b-02.pl:13:$m->morpheme('sun');
example/b-02.pl:14:$m->morpheme('shine');
example/b-02.pl:15:$m->morpheme('s');
example/b-02.pl:16:$m->morpheme('bright');
example/b-02.pl:17:$m->morpheme('er');
example/b-02.pl:19:print $doc->to_pretty_xml;
example/06.pl:6:my $corpus = XML::Loy::XStandoff->new('corpus');
example/06.pl:7:my $doc = $corpus->textual_content('Give me the hammer!');
example/06.pl:8:$corpus->segmentation;
example/06.pl:9:my $data = $corpus->layer->extension('-AnaWiki::DocumentStructure');
example/06.pl:10:my $s = $data->ds_para->ds_sentence;
example/06.pl:12:foreach ($doc->extension('-XStandoff::Tokenizer')->tokenize) {
example/06.pl:13:  $s->ds_word({lemma => lc $_->[0]})->seg($_->[1]);
example/06.pl:16:print $corpus->to_pretty_xml;
example/02.pl:5:my $ds = XML::Loy::AnaWiki::DocumentStructure->new('doc');
example/02.pl:6:my $p = $ds->ds_para('First Paragraph Comment');
example/02.pl:7:$p->ds_sentence("First sentence");
example/02.pl:8:$p->ds_sentence("Second sentence");
example/02.pl:9:$p->ds_sentence({ 'xml:id' => 's-3' } => "Final sentence");
example/02.pl:11:print $ds->to_pretty_xml;
example/b-03.pl:9:my $doc = XML::Loy->new(<<'XML');
example/b-03.pl:10:<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
example/b-03.pl:17:$doc->extension(-Example::Morphemes);
example/b-03.pl:18:my $p = $doc->at('body')->add('p' => 'The sun shines');
example/b-03.pl:19:my $m = $p->morphemes;
example/b-03.pl:20:$m->morpheme('bright');
example/b-03.pl:21:$m->morpheme('er');
example/b-03.pl:23:print $doc->to_pretty_xml;
example/01.pl:6:my $doc = XML::Loy->new('document');
example/01.pl:8:$doc->set(title => 'My Title');
example/01.pl:9:$doc->set(title => 'My New Title');
example/01.pl:10:$doc->add(paragraph => { id => 'p-1' } => 'First Paragraph');
example/01.pl:11:$doc->add(paragraph => { id => 'p-2' } => 'Second Paragraph');
example/01.pl:13:print $doc->to_pretty_xml;
example/03.pl:6:my $doc = XML::Loy->new(<<'XML');
example/03.pl:7:<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
example/03.pl:16:$doc->extension(-AnaWiki::DocumentStructure);
example/03.pl:17:my $p = $doc->at('body')->ds_para;
example/03.pl:18:$p->ds_sentence('First senence');
example/03.pl:19:$p->ds_sentence('Second sentence');
example/03.pl:21:print $doc->to_pretty_xml;
example/b-04.pl:9:my $cd = XML::Loy::XStandoff->new('corpusData');
example/b-04.pl:12:$cd->extension(-Example::Morphemes, -Example::Syllables);
example/b-04.pl:15:$cd->textual_content('The sun shines brighter.');
example/b-04.pl:18:my $seg = $cd->segmentation;
example/b-04.pl:20:my $all = $seg->segment(0, 24);
example/b-04.pl:23:my $m = $cd->layer->morphemes;
example/b-04.pl:24:$m->seg($all);
example/b-04.pl:28:  $m->morpheme->seg($seg->segment($_->[0], $_->[1]));
example/b-04.pl:32:my $s = $cd->layer->syllables;
example/b-04.pl:33:$s->seg($all);
example/b-04.pl:38:  $s->syllable->seg($seg->segment($_->[0], $_->[1]));
example/b-04.pl:42:$cd->find('morpheme')->[1]->segment_content('moon');
example/b-04.pl:44:print $cd->to_pretty_xml;
example/b-04.pl:48:my $seg1 = $seg->segment(0,24);
example/b-04.pl:49:my $seg2 = $seg->segment(0, 3);
example/b-04.pl:50:my $seg3 = $seg->segment(4, 7);
example/b-04.pl:51:my $seg4 = $seg->segment(8, 13);
example/b-04.pl:52:my $seg5 = $seg->segment(13, 14);
example/b-04.pl:53:my $seg6 = $seg->segment(15, 21);
example/b-04.pl:54:my $seg7 = $seg->segment(21, 23);
lib/XML/Loy/AnaWiki/DocumentStructure.pm:4:  namespace => 'http://www.text-technology.de/anawiki/ds',
lib/XML/Loy/AnaWiki/DocumentStructure.pm:8:our $UUID = Data::UUID->new;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:13:  return $self->set(title => @_) if $_[0];
lib/XML/Loy/AnaWiki/DocumentStructure.pm:14:  return $self->at('title')->text;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:19:sub ds_para { shift->_ds(paragraph => @_) };
lib/XML/Loy/AnaWiki/DocumentStructure.pm:25:  return unless $self->type =~ /^(ds:)?paragraph$/;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:26:  $self->_ds(sentence => @_)
lib/XML/Loy/AnaWiki/DocumentStructure.pm:33:  return unless $self->type =~ /^(ds:)?sentence$/;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:34:  $self->_ds(word => @_)
lib/XML/Loy/AnaWiki/DocumentStructure.pm:44:  return $self->at("${tag}[xml\\:id=$_[1]]") if @_ == 2 && $_[0] eq 'id';
lib/XML/Loy/AnaWiki/DocumentStructure.pm:45:  return $self->children($tag)->[($_[1] - 1)] if @_ == 2 && $_[0] eq 'pos';
lib/XML/Loy/AnaWiki/DocumentStructure.pm:49:  $attrs->{'xml:id'} //= substr($tag, 0, 1) . '-' . $UUID->create_str;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:55:  return $self->add($tag => $attrs, @_);
lib/XML/Loy/AnaWiki/DocumentStructure.pm:68:XML::Loy::AnaWiki::DocumentStructure - Handling AnaWiki Document Structure
lib/XML/Loy/AnaWiki/DocumentStructure.pm:75:  my $ds = XML::Loy::AnaWiki::DocumentStructure->new('doc');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:77:  my $p = $ds->ds_para('First Paragraph Comment');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:78:  $p->ds_sentence("That's my first sentence");
lib/XML/Loy/AnaWiki/DocumentStructure.pm:79:  $p->ds_sentence("And my second sentence");
lib/XML/Loy/AnaWiki/DocumentStructure.pm:80:  $p->ds_sentence({ 'xml:id' => 's-3' } => "My final sentence");
lib/XML/Loy/AnaWiki/DocumentStructure.pm:82:  print $p->ds_sentence(pos => 2)->text
lib/XML/Loy/AnaWiki/DocumentStructure.pm:85:  print $xrd->to_pretty_xml;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:87:  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
lib/XML/Loy/AnaWiki/DocumentStructure.pm:88:  # <doc xmlns="http://www.text-technology.de/anawiki/ds">
lib/XML/Loy/AnaWiki/DocumentStructure.pm:90:  #   <!-- First Paragraph Comment -->
lib/XML/Loy/AnaWiki/DocumentStructure.pm:91:  #   <paragraph xml:id="p-889B5030-...">
lib/XML/Loy/AnaWiki/DocumentStructure.pm:92:  #     <sentence xml:id="s-889BB124-...">That&#39;s my first sentence</sentence>
lib/XML/Loy/AnaWiki/DocumentStructure.pm:93:  #     <sentence xml:id="s-889BD15E-...">And my second sentence</sentence>
lib/XML/Loy/AnaWiki/DocumentStructure.pm:94:  #     <sentence xml:id="s-3">My final sentence</sentence>
lib/XML/Loy/AnaWiki/DocumentStructure.pm:116:  $doc->ds_title('My Title');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:117:  print $doc->ds_title;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:123:  my $new_para = $doc->ds_para('Comment');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:124:  my $new_para = $doc->ds_para({ xml:id => 'p-2' });
lib/XML/Loy/AnaWiki/DocumentStructure.pm:126:  my $para = $doc->ds_para(pos => 0);
lib/XML/Loy/AnaWiki/DocumentStructure.pm:127:  my $para = $doc->ds_para(id => 'p-2');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:139:  my $new_s = $p->ds_sentence('Textual Content', 'Comment');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:140:  my $new_s = $p->ds_sentence({ xml:id => 's-2' } => 'my text');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:142:  my $s = $p->ds_sentence(pos => 0);
lib/XML/Loy/AnaWiki/DocumentStructure.pm:143:  my $s = $p->ds_sentence(id => 's-2');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:144:  print $s->text;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:157:  my $new_w = $s->ds_word('Elephant');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:158:  my $new_w = $s->ds_word({ xml:id => 'w-2' } => 'Banana');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:160:  my $w = $s->ds_word(pos => 0);
lib/XML/Loy/AnaWiki/DocumentStructure.pm:161:  my $w = $s->ds_word(id => 'w-2');
lib/XML/Loy/AnaWiki/DocumentStructure.pm:162:  print $w->text;
lib/XML/Loy/AnaWiki/DocumentStructure.pm:180:  https://github.com/Akron/XML-Loy-XStandoff
lib/XML/Loy/AnaWiki/DocumentStructure.pm:185:Copyright (C) 2013, L<Nils Diewald|http://nils-diewald.de/>.
lib/XML/Loy/DublinCore.pm:23:      return $self->add($name => @_);
lib/XML/Loy/DublinCore.pm:26:      return $self->set($name => @_);
lib/XML/Loy/DublinCore.pm:31:    my @array = $self->children('dc:' . $name)->pluck('text')->each;
lib/XML/Loy/DublinCore.pm:46:  $self->dc(title => 'Object');
lib/XML/Loy/DublinCore.pm:49:  print $self->dc('title');
lib/XML/Loy/DublinCore.pm:52:  $self->dc(description => {
lib/XML/Loy/DublinCore.pm:58:  $self->dc('+subject' => {
lib/XML/Loy/File.pm:5:  namespace => 'http://sojolicio.us/ns/xml-loy'
lib/XML/Loy/File.pm:15:  return $class->SUPER::new unless $file;
lib/XML/Loy/File.pm:17:  my $data = Mojo::ByteStream->new($file)->slurp->decode->encode->to_string;
lib/XML/Loy/File.pm:19:  my $self = $class->SUPER::new($data);
lib/XML/Loy/File.pm:20:  $self->file($file);
lib/XML/Loy/File.pm:30:  my $root = $self->_root_element or return;
lib/XML/Loy/File.pm:37:      return $root->[2]->{'loy:file'} = shift;
lib/XML/Loy/File.pm:40:      return delete $root->[2]->{'loy:file'};
lib/XML/Loy/File.pm:45:  return $root->[2]->{'loy:file'};
lib/XML/Loy/File.pm:54:  my $file = shift || $self->file || return;
lib/XML/Loy/File.pm:57:  $self->file($file) unless $self->file;
lib/XML/Loy/File.pm:61:  my $byte = Mojo::ByteStream->new($self->root->to_pretty_xml);
lib/XML/Loy/File.pm:64:  return $byte->spurt( $file );
lib/XML/Loy/File.pm:73:  my $file = shift || $self->file || return;
lib/XML/Loy/File.pm:76:  my $byte = Mojo::ByteStream->new($file)->slurp or return;
lib/XML/Loy/File.pm:79:  $self->file($file);
lib/XML/Loy/File.pm:82:  return $self->new($byte);
lib/XML/Loy/File.pm:90:  my $file = shift || $self->file || return;
lib/XML/Loy/File.pm:94:  $self->file
lib/XML/Loy/XStandoff/Data.pm:2:use Mojo::Base -strict;
lib/XML/Loy/XStandoff/Data.pm:8:use overload '""' => sub { shift->string }, fallback => 1;
lib/XML/Loy/XStandoff/Data.pm:17:  $self->data( shift );
lib/XML/Loy/XStandoff/Data.pm:19:  $self->{unchangeable} = shift;
lib/XML/Loy/XStandoff/Data.pm:28:    return $self->{file} = shift;
lib/XML/Loy/XStandoff/Data.pm:30:  return $self->{file};
lib/XML/Loy/XStandoff/Data.pm:34:  return shift->{unchangeable} // 0;
lib/XML/Loy/XStandoff/Data.pm:41:  $self->{$name} = shift;
lib/XML/Loy/XStandoff/Data.pm:49:    return ($self->{data} = \$new);
lib/XML/Loy/XStandoff/Data.pm:52:    return $self->{data} // \'';
lib/XML/Loy/XStandoff/Data.pm:65:    return ${$self->data};
lib/XML/Loy/XStandoff/Data.pm:69:    my $s = ${ $self->data };
lib/XML/Loy/XStandoff/Data.pm:71:    $self->data($s);
lib/XML/Loy/XStandoff/Data.pm:75:  if ($self->unchangeable) {
lib/XML/Loy/XStandoff/Data.pm:81:  my $s = ${ $self->data };
lib/XML/Loy/XStandoff/Data.pm:84:    $new = $replace->( $old );
lib/XML/Loy/XStandoff/Data.pm:90:  $self->data($s);
lib/XML/Loy/XStandoff/Data.pm:93:  if ((length($old) - length($new)) != 0) {
lib/XML/Loy/XStandoff/Data.pm:96:    $self->{on_length_change}->(
lib/XML/Loy/XStandoff/Data.pm:108:    $self->{on_change}->(
lib/XML/Loy/XStandoff/Data.pm:126:my $data = XML::Loy::XStandoff::Data->new;
lib/XML/Loy/XStandoff/Tokenizer.pm:2:use XML::Loy -base;
lib/XML/Loy/XStandoff/Tokenizer.pm:8:  while ($self->type !~ /^(?:xsf:)?corpusData$/) {
lib/XML/Loy/XStandoff/Tokenizer.pm:9:    $self = $self->parent or return;
lib/XML/Loy/XStandoff/Tokenizer.pm:12:  my $seg = $self->segmentation;
lib/XML/Loy/XStandoff/Tokenizer.pm:13:  my $tc = $self->textual_content;
lib/XML/Loy/XStandoff/Tokenizer.pm:18:  foreach my $t (split(/([^-a-zA-ZäüöÖÄÜß]|\s+)/, $tc)) {
lib/XML/Loy/XStandoff/Tokenizer.pm:21:      push(@segments, [$t, $seg->segment($start, $end)]);
lib/XML/Loy/Example/Morphemes.pm:10:  return $self->add(morphemes => @_);
lib/XML/Loy/Example/Morphemes.pm:17:  return unless $self->type =~ /^(?:morph:)?morphemes$/;
lib/XML/Loy/Example/Morphemes.pm:18:  return $self->add(morpheme => @_);
lib/XML/Loy/Example/Syllables.pm:10:  return $self->add(syllables => @_);
lib/XML/Loy/Example/Syllables.pm:17:  return unless $self->type =~ /^(?:syll:)?syllables$/;
lib/XML/Loy/Example/Syllables.pm:18:  return $self->add(syllable => @_);
lib/XML/Loy/Olac.pm:10:  namespace => 'http://www.language-archives.org/OLAC/1.0/',
lib/XML/Loy/Olac.pm:14:    $self->namespace(xsi  => 'http://www.w3.org/2001/XMLSchema-instance');
lib/XML/Loy/Olac.pm:15:    $self->namespace(olac => 'http://www.language-archives.org/OLAC/1.0/');
lib/XML/Loy/Olac.pm:21:  return $class->SUPER::new(scalar @_ ? @_ : 'olac');
lib/XML/Loy/Olac.pm:32:  $olac_name =~ tr/_/-/;
lib/XML/Loy/Olac.pm:38:    $self = $self->at('*') unless $self->parent;
lib/XML/Loy/Olac.pm:41:      $self->attr('xsi:type'  => $olac_name);
lib/XML/Loy/Olac.pm:42:      $self->attr('olac:code' => lc shift);
lib/XML/Loy/Olac.pm:45:    elsif ($self->attr('xsi:type') eq $olac_name) {
lib/XML/Loy/Olac.pm:46:      return $self->attr('olac:code');
lib/XML/Loy/Olac.pm:63:  my $olac = XML::Loy::Olac->new(-DublinCore);
lib/XML/Loy/Olac.pm:64:  $olac->namespace(anno => 'http://myannotation/ns');
lib/XML/Loy/Olac.pm:66:  $olac->olac_linguistic_field('computational_linguistics');
lib/XML/Loy/Olac.pm:68:  $olac->add('anno:meta')->dc(author => 'Nils Diewald')->olac_role('annotator');
lib/XML/Loy/Olac.pm:70:  for ($olac->add('anno:data')->olac_linguistic_type('primary_text')) {
lib/XML/Loy/Olac.pm:71:    $_->add('anno:p' => 'My first paragraph');
lib/XML/Loy/Olac.pm:72:    $_->add('anno:p' => 'My second paragraph');
lib/XML/Loy/Olac.pm:75:  print $olac->to_pretty_xml;
lib/XML/Loy/Olac.pm:77:  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
lib/XML/Loy/Olac.pm:79:  #       xmlns="http://www.language-archives.org/OLAC/1.0/"
lib/XML/Loy/Olac.pm:82:  #       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
lib/XML/Loy/Olac.pm:83:  #       xsi:type="olac-linguistic-field">
lib/XML/Loy/Olac.pm:86:  #                xsi:type="olac-role">Nils Diewald</dc:author>
lib/XML/Loy/Olac.pm:89:  #              xsi:type="olac-linguistic-type">
lib/XML/Loy/Olac.pm:98:  $dom->olac_discourse_type('drama');
lib/XML/Loy/Olac.pm:99:  say $dom->olac_discourse_type;
lib/XML/Loy/Olac.pm:114:  $dom->olac_linguistic_type('primary_text');
lib/XML/Loy/Olac.pm:115:  say $dom->olac_linguistic_type;
lib/XML/Loy/Olac.pm:123:  $dom->olac_linguistic_field('applied_linguistics');
lib/XML/Loy/Olac.pm:124:  say $dom->olac_linguistic_field;
lib/XML/Loy/Olac.pm:158:  $dom->olac_language('de');
lib/XML/Loy/Olac.pm:159:  say $dom->olac_language;
lib/XML/Loy/Olac.pm:163:  $dom->olac_role('annotator');
lib/XML/Loy/Olac.pm:164:  say $dom->olac_annotator;
lib/XML/Loy/XStandoff.pm:7:    shift->namespace(
lib/XML/Loy/XStandoff.pm:24:# - use XML::Loy::Date::RFC3339;
lib/XML/Loy/XStandoff.pm:25:# - iso-8601
lib/XML/Loy/XStandoff.pm:26:# - mimeType => '...'
lib/XML/Loy/XStandoff.pm:29:BEGIN { $UUID = Data::UUID->new };
lib/XML/Loy/XStandoff.pm:38:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:42:    return $self->at('corpusData[xml\:id="' . $_[0] . '"]') unless $_[0];
lib/XML/Loy/XStandoff.pm:43:    return $self->at('corpusData');
lib/XML/Loy/XStandoff.pm:49:  return $self->add(corpusData => \%param);
lib/XML/Loy/XStandoff.pm:55:  return shift->_ref_type(qw/meta metaRef as/, @_);
lib/XML/Loy/XStandoff.pm:64:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:66:  if ($self->type =~ /^(?:xsf:)?corpus$/) {
lib/XML/Loy/XStandoff.pm:68:      $self->at('corpusData') ||
lib/XML/Loy/XStandoff.pm:69:	$self->corpus_data( id => 'cd-' . $UUID->create_str )
lib/XML/Loy/XStandoff.pm:74:  while ($self->type !~ /^(?:xsf:)?corpusData$/) {
lib/XML/Loy/XStandoff.pm:75:    $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:80:    return $self->at('primaryData[xml\:id="' . $_[0] . '"]') if $_[0];
lib/XML/Loy/XStandoff.pm:81:    return $self->at('primaryData');
lib/XML/Loy/XStandoff.pm:86:    return $self->add(primaryData => \%param);
lib/XML/Loy/XStandoff.pm:95:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:97:  if ($self->type =~ /^(?:xsf:)?corpus(?:Data)?$/) {
lib/XML/Loy/XStandoff.pm:98:    $self = ($self->at('primaryData') or $self->primary_data( id => 'pd-' . $UUID->create_str ));
lib/XML/Loy/XStandoff.pm:101:    while ($self->type !~ /^(?:xsf:)?primaryData$/) {
lib/XML/Loy/XStandoff.pm:102:      $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:106:  my $tc = $self->_ref_type(qw/textualContent primaryDataRef raw/, @_);
lib/XML/Loy/XStandoff.pm:107:  my $pd = $self->primary_data;
lib/XML/Loy/XStandoff.pm:108:  $pd->attr(start => 0);
lib/XML/Loy/XStandoff.pm:115:    $end = length($tc->text);
lib/XML/Loy/XStandoff.pm:118:  $pd->attr(end => $end);
lib/XML/Loy/XStandoff.pm:127:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:129:  if ($self->type =~ /^(?:xsf:)?corpus$/) {
lib/XML/Loy/XStandoff.pm:130:    $self = ($self->at('corpusData') or $self->corpus_data( id => 'cd-' . $UUID->create_str ));
lib/XML/Loy/XStandoff.pm:133:    while ($self->type !~ /^(?:xsf:)?corpusData$/) {
lib/XML/Loy/XStandoff.pm:134:      $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:138:  return ($self->at('segmentation') or $self->set(segmentation => @_));
lib/XML/Loy/XStandoff.pm:146:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:148:  if ($self->type =~ /^(?:xsf:)?corpus$/) {
lib/XML/Loy/XStandoff.pm:149:    $self = ($self->at('corpusData') or $self->corpus_data( id => 'cd-' . $UUID->create_str ));
lib/XML/Loy/XStandoff.pm:152:    while ($self->type !~ /^(?:xsf:)?corpusData$/) {
lib/XML/Loy/XStandoff.pm:153:      $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:157:  return ($self->at('annotation') or $self->set(annotation => @_));
lib/XML/Loy/XStandoff.pm:164:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:166:  if ($self->type =~ /^(?:xsf:)?corpus(?:Data)?$/) {
lib/XML/Loy/XStandoff.pm:167:    $self = $self->annotation;
lib/XML/Loy/XStandoff.pm:170:  while ($self->type !~ /^(?:xsf:)?annotation$/) {
lib/XML/Loy/XStandoff.pm:171:    $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:175:    return $self->at('level[xml\:id="' . $_[0] . '"]') if $_[0];
lib/XML/Loy/XStandoff.pm:176:    return $self->at('level');
lib/XML/Loy/XStandoff.pm:181:    return $self->add(level => \%param);
lib/XML/Loy/XStandoff.pm:190:  $self = $self->at('*') unless $self->type;
lib/XML/Loy/XStandoff.pm:192:  if ($self->type =~ /^(?:xsf:)?(corpus(?:Data)?|level|annotation)?$/) {
lib/XML/Loy/XStandoff.pm:193:    $self = ($self->at('level') or $self->level( id => 'lev-' . $UUID->create_str ));
lib/XML/Loy/XStandoff.pm:196:    while ($self->type !~ /^(?:xsf:)?level$/) {
lib/XML/Loy/XStandoff.pm:197:      $self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:204:  return ($self->at('layer') or $self->set(layer => @_));
lib/XML/Loy/XStandoff.pm:216:    unless ($self->type =~ /^(?:xsf:)?segmentation/) {
lib/XML/Loy/XStandoff.pm:217:      while ($self->type !~ /^(?:xsf:)?corpusData$/) {
lib/XML/Loy/XStandoff.pm:218:	$self = $self->parent or return;
lib/XML/Loy/XStandoff.pm:222:    return $self->at('segment[xml\:id=' . $id . ']');
lib/XML/Loy/XStandoff.pm:229:    my $id    = shift || 'seg-' . $UUID->create_str;
lib/XML/Loy/XStandoff.pm:230:    if (my $seg = $self->at("segment[xml\:id=$id]")) {
lib/XML/Loy/XStandoff.pm:231:      $seg->attr(start => $start);
lib/XML/Loy/XStandoff.pm:232:      $seg->attr(end => $end);
lib/XML/Loy/XStandoff.pm:236:      my $segs = $self->segmentation;
lib/XML/Loy/XStandoff.pm:238:      if ($segs->add(segment => {
lib/XML/Loy/XStandoff.pm:255:  return $self->attr('xsf:segment') unless $_[0];
lib/XML/Loy/XStandoff.pm:258:    return $self->attr('xsf:segment' => shift->attr('xml:id'));
lib/XML/Loy/XStandoff.pm:261:  return $self->attr('xsf:segment' => shift);
lib/XML/Loy/XStandoff.pm:271:  if ($self->type =~ /^(?:xsf:)?segment$/) {
lib/XML/Loy/XStandoff.pm:275:    $id = $self->seg;
lib/XML/Loy/XStandoff.pm:276:    $seg = $self->segmentation->segment($id);
lib/XML/Loy/XStandoff.pm:281:  my $attrs = $seg->attr;
lib/XML/Loy/XStandoff.pm:283:  return $self->primary_data->textual_content->string(
lib/XML/Loy/XStandoff.pm:284:    $attrs->{start},
lib/XML/Loy/XStandoff.pm:285:    ($attrs->{end} - $attrs->{start}),
lib/XML/Loy/XStandoff.pm:295:  b($data->string)->spurt($data->file);
lib/XML/Loy/XStandoff.pm:305:  my $diff = length($new) - length($old);
lib/XML/Loy/XStandoff.pm:307:  $self->segmentation->children('segment')->each(
lib/XML/Loy/XStandoff.pm:310:      my $attrs = $seg->attr;
lib/XML/Loy/XStandoff.pm:312:      if ($attrs->{start} >= $end) {
lib/XML/Loy/XStandoff.pm:313:	$attrs->{start} += $diff
lib/XML/Loy/XStandoff.pm:315:      if ($attrs->{end} >= $end) {
lib/XML/Loy/XStandoff.pm:316:	$attrs->{end} += $diff
lib/XML/Loy/XStandoff.pm:321:  my $pd = $self->primary_data;
lib/XML/Loy/XStandoff.pm:322:  my $tc = $pd->textual_content;
lib/XML/Loy/XStandoff.pm:323:#  $pd->attr(start => 0);
lib/XML/Loy/XStandoff.pm:324:#  $pd->attr(end => length($tc));
lib/XML/Loy/XStandoff.pm:353:    if ($data = $self->at($content)) {
lib/XML/Loy/XStandoff.pm:358:	  XML::Loy::XStandoff::Data->new($data->text);
lib/XML/Loy/XStandoff.pm:361:	$data_obj->on(
lib/XML/Loy/XStandoff.pm:364:	    $data->replace_content($d->string);
lib/XML/Loy/XStandoff.pm:369:	$data_obj->on(
lib/XML/Loy/XStandoff.pm:371:	    $self->_on_length_change(@_)
lib/XML/Loy/XStandoff.pm:380:    elsif ($data = $self->at($content_ref)) {
lib/XML/Loy/XStandoff.pm:381:      my $ref = $data->attr('uri');
lib/XML/Loy/XStandoff.pm:384:      if ($ref =~ s!^file://!! or $ref !~ /^[a-zA-Z]+:/) {
lib/XML/Loy/XStandoff.pm:388:	  $data = XML::Loy::XStandoff::Data->new(
lib/XML/Loy/XStandoff.pm:389:	    b($ref)->slurp->decode->to_string
lib/XML/Loy/XStandoff.pm:393:	  $data->file($ref);
lib/XML/Loy/XStandoff.pm:396:	  $data->on(
lib/XML/Loy/XStandoff.pm:398:	      $self->_on_file_change(@_)
lib/XML/Loy/XStandoff.pm:403:	  $data->on(
lib/XML/Loy/XStandoff.pm:405:	      $self->_on_length_change(@_)
lib/XML/Loy/XStandoff.pm:412:	my $xml = XML::Loy::File->new($ref);
lib/XML/Loy/XStandoff.pm:413:	$xml = $xml->as(@as, -File) if @as;
lib/XML/Loy/XStandoff.pm:419:	my $tx = Mojo::UserAgent->new->get($ref);
lib/XML/Loy/XStandoff.pm:420:	my $res = $tx->success || return '';
lib/XML/Loy/XStandoff.pm:422:	my $data = $res->body;
lib/XML/Loy/XStandoff.pm:425:	  return XML::Loy::XStandoff::Data->new($data->text, 1);
lib/XML/Loy/XStandoff.pm:428:	return XML::Loy->new($data)->as(@as);
lib/XML/Loy/XStandoff.pm:436:	  XML::Loy::XStandoff::Data->new;
lib/XML/Loy/XStandoff.pm:439:	$data_obj->on(
lib/XML/Loy/XStandoff.pm:442:	    $data->replace_content($d->string);
lib/XML/Loy/XStandoff.pm:447:	$data_obj->on(
lib/XML/Loy/XStandoff.pm:449:	    $self->_on_length_change(@_)
lib/XML/Loy/XStandoff.pm:455:      return $self->set($content);
lib/XML/Loy/XStandoff.pm:463:      $data = b( $param{file} )->slurp;
lib/XML/Loy/XStandoff.pm:466:	$self->find($content_ref)->pluck('remove');
lib/XML/Loy/XStandoff.pm:467:	return $self->set($content)->add( $self->new($data) );
lib/XML/Loy/XStandoff.pm:471:      $self->find($content)->pluck('remove');
lib/XML/Loy/XStandoff.pm:473:      return $self->set($content_ref => { uri => $param{uri} });
lib/XML/Loy/XStandoff.pm:480:  $self->find($content_ref)->pluck('remove');
lib/XML/Loy/XStandoff.pm:481:  return $self->set($content => {} => $data);
lib/XML/Loy/XStandoff.pm:494:XML::Loy::XStandoff - Read and Write XStandoff Documents
lib/XML/Loy/XStandoff.pm:502:  my $xsf = XML::Loy::XStandoff->new('corpus');
lib/XML/Loy/XStandoff.pm:505:  my $cd = $xsf->corpus_data(id => 'cs_1');
lib/XML/Loy/XStandoff.pm:508:  $cd->meta->add('dc:title' => 'My Document');
lib/XML/Loy/XStandoff.pm:511:  $cd->textual_content('My text');
lib/XML/Loy/XStandoff.pm:514:  $cd->segment(0, 2);
lib/XML/Loy/XStandoff.pm:515:  my $seg = $cd->segment(3, 7);
lib/XML/Loy/XStandoff.pm:518:  print $xsf->segment_content($seg);
lib/XML/Loy/XStandoff.pm:522:  $xsf->segment_content(
lib/XML/Loy/XStandoff.pm:528:  print $xsf->to_pretty_xml;
lib/XML/Loy/XStandoff.pm:530:  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
lib/XML/Loy/XStandoff.pm:537:  #     <primaryData end="7" start="0" xml:id="pd-F82533A0-...">
lib/XML/Loy/XStandoff.pm:541:  #       <segment end="2" start="0" type="char" xml:id="seg-F825B7DA-..." />
lib/XML/Loy/XStandoff.pm:542:  #       <segment end="7" start="3" type="char" xml:id="seg-F82617FC-..." />
lib/XML/Loy/XStandoff.pm:565:  my $corpus = XML::Loy::XStandoff->new('corpus');
lib/XML/Loy/XStandoff.pm:566:  my $cd = XML::Loy::XStandoff->new('corpusData');
lib/XML/Loy/XStandoff.pm:574:  my $anno = $cd->annotation;
lib/XML/Loy/XStandoff.pm:576:  $cd->annotation->add('level');
lib/XML/Loy/XStandoff.pm:584:  $corpus->corpus_data(id => 'cd-1');
lib/XML/Loy/XStandoff.pm:585:  my $cd = $corpus->corpus_data('cd-1');
lib/XML/Loy/XStandoff.pm:586:  my $cd = $corpus->corpus_data;
lib/XML/Loy/XStandoff.pm:596:  my $lay = $a->layer('xml:id' => 'lay-1');
lib/XML/Loy/XStandoff.pm:597:  my $lay = $a->layer('lay-1');
lib/XML/Loy/XStandoff.pm:598:  my $lay = $a->layer;
lib/XML/Loy/XStandoff.pm:613:  my $lev = $a->level('xml:id' => 'lev-1');
lib/XML/Loy/XStandoff.pm:614:  my $lev = $a->level('lev-1');
lib/XML/Loy/XStandoff.pm:615:  my $lev = $a->level;
lib/XML/Loy/XStandoff.pm:630:  my $meta = $cd->meta;
lib/XML/Loy/XStandoff.pm:632:  $cd->meta->add('dc:title' => 'My title');
lib/XML/Loy/XStandoff.pm:634:  $cd->meta(uri  => '/meta.xml');
lib/XML/Loy/XStandoff.pm:635:  $cd->meta(file => '/meta.xml');
lib/XML/Loy/XStandoff.pm:636:  $cd->meta(uri  => 'http://.../meta.xml');
lib/XML/Loy/XStandoff.pm:637:  $cd->meta(as   => [-Loy, -DublinCore])->dc('Title');
lib/XML/Loy/XStandoff.pm:659:  my $pd = $cd->primary_data('xml:id' => 'pd-1');
lib/XML/Loy/XStandoff.pm:660:  my $pd = $cd->primary_data('pd-1');
lib/XML/Loy/XStandoff.pm:661:  my $pd = $cd->primary_data;
lib/XML/Loy/XStandoff.pm:675:  print $lay->at('token')->segment_content;
lib/XML/Loy/XStandoff.pm:676:  print $cd->segment('seg-1')->segment_content;
lib/XML/Loy/XStandoff.pm:678:  $lay->at('token')->segment_content('new');
lib/XML/Loy/XStandoff.pm:679:  $lay->at('token')->segment_content(sub {
lib/XML/Loy/XStandoff.pm:699:  my $seg = $cd->segmentation;
lib/XML/Loy/XStandoff.pm:701:  $cd->segmentation->add('segment');
lib/XML/Loy/XStandoff.pm:709:  my $seg = $cd->segment('seg-1');
lib/XML/Loy/XStandoff.pm:710:  print $seg->attr('start');
lib/XML/Loy/XStandoff.pm:712:  my $seg_id = $cd->segment(14, 20);
lib/XML/Loy/XStandoff.pm:713:  my $seg_id = $cd->segment(14, 20);
lib/XML/Loy/XStandoff.pm:714:  $cd->segment('seg-1', 14, 21);
lib/XML/Loy/XStandoff.pm:726:  $lay->add('token')->seg('seg-1');
lib/XML/Loy/XStandoff.pm:727:  # <token xsf:segment="seg-1" />
lib/XML/Loy/XStandoff.pm:729:  print $lay->at('token')->seg;
lib/XML/Loy/XStandoff.pm:730:  # seg-1
lib/XML/Loy/XStandoff.pm:737:  $pd->textual_content(uri => '/text.txt');
lib/XML/Loy/XStandoff.pm:738:  $pd->textual_content(uri => 'http://.../text.txt');
lib/XML/Loy/XStandoff.pm:739:  $pd->textual_content(file => '/text.txt');
lib/XML/Loy/XStandoff.pm:740:  $pd->textual_content('Hello World');
lib/XML/Loy/XStandoff.pm:742:  print $pd->textual_content;
lib/XML/Loy/XStandoff.pm:775:  https://github.com/Akron/XML-Loy-XStandoff
lib/XML/Loy/XStandoff.pm:780:Copyright (C) 2013, L<Nils Diewald|http://nils-diewald.de/>.
lib/XML/Loy/Schema/Validator.pm:5:    shift->namespace(
lib/XML/Loy/Schema/Validator.pm:6:      xsi => 'http://www.w3.org/2001/XMLSchema-instance'
lib/XML/Loy/Schema/Validator.pm:16:  my $root = $self->at(':root');
lib/XML/Loy/Schema/Validator.pm:21:    ($ns, $schema_loc) = split /\s/, $root->attr('xsi:schemaLocation');
lib/XML/Loy/Schema/Validator.pm:26:  $ns = shift || $ns || $root->namespace;
lib/XML/Loy/Schema/Validator.pm:29:  my $schema = XML::LibXML::Schema->new( location => $schema_loc );
lib/XML/Loy/Schema/Validator.pm:32:  my $doc = XML::LibXML->load_xml(string => $self->to_pretty_xml );
lib/XML/Loy/Schema/Validator.pm:35:  eval { $schema->validate($doc) };
lib/XML/Loy/Schema/Validator.pm:40:  # Everything is fine - set schemaLocation to document
lib/XML/Loy/Schema/Validator.pm:41:  $root->attr('xsi:schemaLocation' => "$ns $schema_loc");
lib/XML/Loy/Schema/Validator.pm:53:XML::Loy::Schema::Validator - Validate Documents using XML Schema
lib/XML/Loy/Schema/Validator.pm:60:  my $doc = XML::Loy->new('doc');
lib/XML/Loy/Schema/Validator.pm:61:  $doc->extension(-Schema::Validator);
lib/XML/Loy/Schema/Validator.pm:62:  $doc->add(name => 'Peter' => { 'xml:id' => 'n-1' });
lib/XML/Loy/Schema/Validator.pm:64:  if ($doc->validate(
lib/XML/Loy/Schema/Validator.pm:88:  my $doc = $doc->validate(
lib/XML/Loy/Schema/Validator.pm:93:  if (my $doc = $doc->validate('http://sojolicious/ns/loy.xsd')) {
lib/XML/Loy/Schema/Validator.pm:94:    print $doc->to_pretty_xml;
lib/XML/Loy/Schema/Validator.pm:97:  print $doc->to_pretty_xml if $doc->validate;
lib/XML/Loy/Schema/Validator.pm:116:  https://github.com/Akron/XML-Loy-XStandoff
lib/XML/Loy/Schema/Validator.pm:121:Copyright (C) 2013, L<Nils Diewald|http://nils-diewald.de/>.
Makefile.PL:27:      license     => 'http://www.opensource.org/licenses/artistic-license-2.0',
Makefile.PL:28:      repository  => 'https://github.com/Akron/XML-Loy-XStandoff'
Readme.pod:5:XML::Loy::XStandoff - Read and Write XStandoff Documents
Readme.pod:13:  my $xsf = XML::Loy::XStandoff->new('corpus');
Readme.pod:16:  my $cd = $xsf->corpus_data(id => 'cs_1');
Readme.pod:19:  $cd->meta->add('dc:title' => 'My Document');
Readme.pod:22:  $cd->textual_content('My text');
Readme.pod:25:  $cd->segment(0, 2);
Readme.pod:26:  my $seg = $cd->segment(3, 7);
Readme.pod:29:  print $xsf->segment_content($seg);
Readme.pod:33:  $xsf->segment_content(
Readme.pod:39:  print $xsf->to_pretty_xml;
Readme.pod:41:  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
Readme.pod:48:  #     <primaryData end="7" start="0" xml:id="pd-F82533A0-...">
Readme.pod:52:  #       <segment end="2" start="0" type="char" xml:id="seg-F825B7DA-..." />
Readme.pod:53:  #       <segment end="7" start="3" type="char" xml:id="seg-F82617FC-..." />
Readme.pod:76:  my $corpus = XML::Loy::XStandoff->new('corpus');
Readme.pod:77:  my $cd = XML::Loy::XStandoff->new('corpusData');
Readme.pod:85:  my $anno = $cd->annotation;
Readme.pod:87:  $cd->annotation->add('level');
Readme.pod:95:  $corpus->corpus_data(id => 'cd-1');
Readme.pod:96:  my $cd = $corpus->corpus_data('cd-1');
Readme.pod:97:  my $cd = $corpus->corpus_data;
Readme.pod:107:  my $lay = $a->layer('xml:id' => 'lay-1');
Readme.pod:108:  my $lay = $a->layer('lay-1');
Readme.pod:109:  my $lay = $a->layer;
Readme.pod:124:  my $lev = $a->level('xml:id' => 'lev-1');
Readme.pod:125:  my $lev = $a->level('lev-1');
Readme.pod:126:  my $lev = $a->level;
Readme.pod:141:  my $meta = $cd->meta;
Readme.pod:143:  $cd->meta->add('dc:title' => 'My title');
Readme.pod:145:  $cd->meta(uri  => '/meta.xml');
Readme.pod:146:  $cd->meta(file => '/meta.xml');
Readme.pod:147:  $cd->meta(uri  => 'http://.../meta.xml');
Readme.pod:148:  $cd->meta(as   => [-Loy, -DublinCore])->dc('Title');
Readme.pod:170:  my $pd = $cd->primary_data('xml:id' => 'pd-1');
Readme.pod:171:  my $pd = $cd->primary_data('pd-1');
Readme.pod:172:  my $pd = $cd->primary_data;
Readme.pod:186:  print $lay->at('token')->segment_content;
Readme.pod:187:  print $cd->segment('seg-1')->segment_content;
Readme.pod:189:  $lay->at('token')->segment_content('new');
Readme.pod:190:  $lay->at('token')->segment_content(sub {
Readme.pod:210:  my $seg = $cd->segmentation;
Readme.pod:212:  $cd->segmentation->add('segment');
Readme.pod:220:  my $seg = $cd->segment('seg-1');
Readme.pod:221:  print $seg->attrs('start');
Readme.pod:223:  my $seg_id = $cd->segment(14, 20);
Readme.pod:224:  my $seg_id = $cd->segment(14, 20);
Readme.pod:225:  $cd->segment('seg-1', 14, 21);
Readme.pod:237:  $lay->add('token')->seg('seg-1');
Readme.pod:238:  # <token xsf:segment="seg-1" />
Readme.pod:240:  print $lay->at('token')->seg;
Readme.pod:241:  # seg-1
Readme.pod:248:  $pd->textual_content(uri => '/text.txt');
Readme.pod:249:  $pd->textual_content(uri => 'http://.../text.txt');
Readme.pod:250:  $pd->textual_content(file => '/text.txt');
Readme.pod:251:  $pd->textual_content('Hello World');
Readme.pod:253:  print $pd->textual_content;
Readme.pod:286:  https://github.com/Akron/XML-Loy-XStandoff
Readme.pod:291:Copyright (C) 2013, L<Nils Diewald|http://nils-diewald.de/>.
t/files/meta.xml:2:<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
t/files/meta.xml:8:    <dc:date>2000-01-23</dc:date>
t/File.t:21:ok(my $xml = XML::Loy::File->new, 'XML::Loy');
t/File.t:24:ok($xml = $xml->add('myroot'), 'New root');
t/File.t:26:ok($xml->add(p => 'My first paragraph'), 'Add Paragraph 1');
t/File.t:27:ok($xml->add(p => 'My second paragraph'), 'Add Paragraph 2');
t/File.t:31:ok($xml->save($file_name), 'Save temporarily');
t/File.t:33:is($xml->file, $file_name, 'Load file name');
t/File.t:35:ok(my $xml_2 = XML::Loy::File->new($file_name), 'New document');
t/File.t:37:is($xml_2->file, $file_name, 'File name correct');
t/File.t:39:is($xml_2->find('p')->[0]->text, 'My first paragraph', 'First para');
t/File.t:41:is($xml_2->find('p')->[1]->text, 'My second paragraph', 'Second para');
t/DocumentStructure.t:7:ok(my $ds = XML::Loy::AnaWiki::DocumentStructure->new('doc'), 'New doc');
t/DocumentStructure.t:9:my $p = $ds->ds_para('First Paragraph Comment');
t/DocumentStructure.t:10:$p->ds_sentence("That's my first sentence");
t/DocumentStructure.t:11:$p->ds_sentence("And my second sentence");
t/DocumentStructure.t:12:$p->ds_sentence({ 'xml:id' => 's-3' } => "My final sentence");
t/DocumentStructure.t:14:is($p->ds_sentence(pos => 2)->text, 'And my second sentence', 'Second sentence');
t/DocumentStructure.t:15:is($p->ds_sentence(id => 's-3')->text, 'My final sentence', 'Last sentence');
t/DocumentStructure.t:17:# diag $ds->to_pretty_xml;
t/DocumentStructure.t:19:my $s = $p->ds_sentence;
t/DocumentStructure.t:20:ok($s->ds_word('Elephant'), 'Set Elephant');
t/DocumentStructure.t:22:my $doc = XML::Loy->new(<<'XML');
t/DocumentStructure.t:23:<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
t/DocumentStructure.t:32:$doc->extension('-AnaWiki::DocumentStructure');
t/DocumentStructure.t:34:my $p = $doc->at('body')->ds_para;
t/DocumentStructure.t:35:$p->ds_sentence('Hello World');
t/DocumentStructure.t:36:$p->ds_sentence('Example sentence');
t/DocumentStructure.t:38:is($p->ds_sentence(pos => 1)->text, 'Hello World', 'First sentence');
t/DocumentStructure.t:39:is($p->ds_sentence(pos => 2)->text, 'Example sentence', 'Example sentence');
t/DocumentStructure.t:48:ok(my $p = $doc->ds_para, 'New Paragraph');
t/DocumentStructure.t:49:ok($p->ds_sentence("That's a new sentence"), 'Add sentence');
t/DocumentStructure.t:51:$p->ds_sentence('Next Sentence');
t/DocumentStructure.t:54:# ('xml:id' => 'p-1')
t/Schema-Validator.t:8:ok(my $corpus = XML::Loy::XStandoff->new('corpus'), 'Create Corpus');
t/Schema-Validator.t:9:ok(my $doc = $corpus->textual_content('Give me the hammer!'), 'Create Textual Content');
t/Schema-Validator.t:11:ok($corpus->segmentation, 'Create Segmentation');
t/Schema-Validator.t:12:ok(my $data = $corpus->layer->extension('-AnaWiki::DocumentStructure'), 'Create doc structure');
t/Schema-Validator.t:13:ok(my $sentence = $data->ds_para->ds_sentence, 'Add sentence');
t/Schema-Validator.t:15:ok($corpus->extension('-XStandoff::Tokenizer'), 'Add tokenizer extension');
t/Schema-Validator.t:17:foreach ($doc->tokenize) {
t/Schema-Validator.t:18:  ok($sentence->ds_word({surface => $_->[0]})->seg($_->[1]), 'Add word');
t/Schema-Validator.t:21:is($corpus->at(':root')->attr('xmlns:ds'), 'http://www.text-technology.de/anawiki/ds', 'ds ns');
t/Schema-Validator.t:23:is($corpus->at(':root')->attr('xmlns:xsf'), 'http://www.xstandoff.net/2009/xstandoff/1.1', 'xsf ns');
t/Schema-Validator.t:25:is($corpus->primary_data->attr('end'), 19, 'End of textual data');
t/Schema-Validator.t:26:is($corpus->primary_data->attr('start'), 0, 'Start of textual data');
t/Schema-Validator.t:28:ok(my $s = $corpus->level->layer->ds_para(pos => 0)->ds_sentence(pos => 0), 'First sentence');
t/Schema-Validator.t:30:foreach my $w ($s->children('word')->each) {
t/Schema-Validator.t:31:  is($w->attr('surface'), $w->segment_content,
t/Schema-Validator.t:37:ok(my $c = $corpus->extension('-Schema::Validator')->validate($loc), 'Validate');
t/Schema-Validator.t:39:ok($c = $c->validate, 'Validate');
t/Schema-Validator.t:40:ok($c->add('Funny'), 'Add problem');
t/Schema-Validator.t:43:  $c->validate
t/Schema-Validator.t:47:  $c->validate
t/Olac-DublinCore.t:14:my $olac = XML::Loy::Olac->new;
t/Olac-DublinCore.t:16:$olac->extension(-DublinCore);
t/Olac-DublinCore.t:19:ok($olac->dc(title => 'My MetaData document'), 'Set title');
t/Olac-DublinCore.t:22:is($olac->dc('title'), 'My MetaData document', 'Get meta data');
t/Olac-DublinCore.t:25:ok($olac->dc(description => { 'xml:lang' => 'de' } => 'Ein kleines Dokument', 'A Dublin Core Example'), 'Set description');
t/Olac-DublinCore.t:27:is($olac->dc('description'), 'Ein kleines Dokument', 'Get description');
t/Olac-DublinCore.t:30:ok($olac->dc('+subject' => { 'xsi:type' => 'dcterms:DDC' } => '0.62'), 'Add subject');
t/Olac-DublinCore.t:31:ok($olac->dc('+subject' => 'Example'), 'Add subject');
t/Olac-DublinCore.t:33:my @subject = $olac->dc('subject');
t/Olac-DublinCore.t:38:my $author = $olac->dc(author => 'Peter');
t/Olac-DublinCore.t:40:is($author->text, 'Peter', 'Author');
t/Olac-DublinCore.t:41:is($olac->dc('author'), 'Peter', 'Author');
t/Olac-DublinCore.t:43:ok($author->olac_role('annotator'), 'Olac type');
t/Olac-DublinCore.t:44:is($author->olac_role, 'annotator', 'Olac type');
t/Olac-DublinCore.t:46:# New document - synopsis
t/Olac-DublinCore.t:48:$olac = XML::Loy::Olac->new;
t/Olac-DublinCore.t:49:$olac->extension(-DublinCore);
t/Olac-DublinCore.t:50:$olac->namespace(anno => 'http://myannotation/ns');
t/Olac-DublinCore.t:52:$olac->olac_linguistic_field('computational_linguistics');
t/Olac-DublinCore.t:54:$olac->add('anno:meta')->dc(author => 'Nils Diewald')->olac_role('annotator');
t/Olac-DublinCore.t:56:for ($olac->add('anno:data')->olac_linguistic_type('primary_text')) {
t/Olac-DublinCore.t:57:  $_->add('anno:p' => 'My first paragraph');
t/Olac-DublinCore.t:58:  $_->add('anno:p' => 'My second paragraph');
t/Olac-DublinCore.t:61:$olac = XML::Loy::Olac->new;
t/Olac-DublinCore.t:62:$olac->extension(-DublinCore);
t/Olac-DublinCore.t:65:  $olac->dc("+$_" => 'Maik Stührenberg')->olac_role($_);
t/Olac-DublinCore.t:66:  $olac->dc("+$_" => 'Nils Diewald')->olac_role($_);
t/Olac-DublinCore.t:69:$olac->dc(title => 'Example');
t/Olac-DublinCore.t:70:$olac->dc(description => 'This is an example');
t/Olac-DublinCore.t:72:is($olac->at('*')->attr('xmlns:xsi'),
t/Olac-DublinCore.t:73:   'http://www.w3.org/2001/XMLSchema-instance',
t/Olac-DublinCore.t:76:is($olac->at('*')->attr('xmlns:olac'),
t/Olac-DublinCore.t:77:   'http://www.language-archives.org/OLAC/1.0/',
t/Olac-DublinCore.t:80:$olac = XML::Loy->new('test');
t/Olac-DublinCore.t:81:$olac->extension(-Olac, -DublinCore);
t/Olac-DublinCore.t:84:  $olac->dc("+$_" => 'Maik Stührenberg')->olac_role($_);
t/Olac-DublinCore.t:85:  $olac->dc("+$_" => 'Nils Diewald')->olac_role($_);
t/Olac-DublinCore.t:88:$olac->dc(title => 'Example');
t/Olac-DublinCore.t:89:$olac->dc(description => 'This is an example');
t/Olac-DublinCore.t:91:is($olac->at('*')->attr('xmlns:xsi'),
t/Olac-DublinCore.t:92:   'http://www.w3.org/2001/XMLSchema-instance',
t/Olac-DublinCore.t:95:is($olac->at('*')->attr('xmlns:olac'),
t/Olac-DublinCore.t:96:   'http://www.language-archives.org/OLAC/1.0/',
t/XStandoff-Tokenizer.t:21:ok(my $corpus = XML::Loy::XStandoff->new('corpus'), 'New corpus');
t/XStandoff-Tokenizer.t:23:ok(my $cd = $corpus->corpus_data(id => 'b5'), 'Add corpusData');
t/XStandoff-Tokenizer.t:25:ok(my $pd = $cd->primary_data(id => 'b6'), 'Add primary data');
t/XStandoff-Tokenizer.t:27:ok($pd->textual_content('This is my little test suite'), 'Set textual content');
t/XStandoff-Tokenizer.t:29:ok($corpus->extension('-XStandoff::Tokenizer'), 'Add extension');
t/XStandoff-Tokenizer.t:31:my $level = $cd->add('-Level');
t/XStandoff-Tokenizer.t:33:foreach ($cd->tokenize) {
t/XStandoff-Tokenizer.t:34:  $level->add('-Word' => { lemma => lc $_->[0] })->seg( $_->[1] );
t/XStandoff.t:19:ok(my $corpus = XML::Loy::XStandoff->new('corpus'), 'New corpus');
t/XStandoff.t:21:ok(my $cd = $corpus->corpus_data(id => 'b5'), 'Add corpusData');
t/XStandoff.t:23:ok(my $meta = $cd->meta, 'Add meta');
t/XStandoff.t:25:ok($meta->add('dc:title' => 'My title'), 'Add Meta information');
t/XStandoff.t:27:is($meta->at('dc\:title')->text, 'My title', 'Get Meta information');
t/XStandoff.t:29:ok($cd->meta(uri => 'http://.../'), 'Add Meta reference');
t/XStandoff.t:31:ok($cd->meta(uri => $FindBin::Bin . '/files/meta.xml'), 'Add Meta reference');
t/XStandoff.t:33:ok(my $desc = $cd->meta->at('Description'), 'Description');
t/XStandoff.t:35:is($desc->at('creator')->text, 'Karl Mustermann', 'Creator');
t/XStandoff.t:37:ok($meta = $cd->meta(as => [-Loy, -DublinCore]), 'Meta');
t/XStandoff.t:39:ok($desc = $meta->at('Description'), 'Description');
t/XStandoff.t:41:is($desc->dc('creator'), 'Karl Mustermann', 'Creator');
t/XStandoff.t:42:is($desc->dc('title'), 'Algebra', 'Title');
t/XStandoff.t:43:is($desc->dc('subject'), 'mathematics', 'Subject');
t/XStandoff.t:44:is($desc->dc('date'), '2000-01-23', 'Date');
t/XStandoff.t:45:is($desc->dc('language'), 'EN', 'Language');
t/XStandoff.t:46:is($desc->dc('description'), 'An introduction to algebra', 'Description');
t/XStandoff.t:48:ok(my $pd = $cd->primary_data(id => '6', hallo => 'test'), 'Add primary data');
t/XStandoff.t:50:ok($pd->textual_content('Mein Text'), 'Set textual content');
t/XStandoff.t:52:ok($pd->textual_content(file => $FindBin::Bin . '/files/text.txt'),
t/XStandoff.t:55:is($pd->textual_content, "Dies ist mein Text.", 'Get textual data');
t/XStandoff.t:57:ok($pd->textual_content(uri => $FindBin::Bin . '/files/text.txt'),
t/XStandoff.t:60:is($pd->textual_content, "Dies ist mein Text.\n", 'Get textual data');
t/XStandoff.t:64:  ok($pd->textual_content(uri => 'http://www.spiegel.de/robots.txt'),
t/XStandoff.t:67:  like($pd->textual_content, qr{User-agent}, 'Get textual data');
t/XStandoff.t:70:ok(!$pd->at('textualContent'), 'No element for textual content');
t/XStandoff.t:72:ok($pd->textual_content("Dies ist mein Text.\n"),
t/XStandoff.t:75:ok(my $segs = $cd->segmentation, 'Add segmentation');
t/XStandoff.t:77:ok(my $id1 = $segs->segment(0, 4), 'Segment');
t/XStandoff.t:79:is($segs->segment($id1)->attr('start'), 0, 'Segment');
t/XStandoff.t:80:is($segs->segment($id1)->attr('end'), 4, 'Segment');
t/XStandoff.t:82:ok(my $id2 = $segs->segment(5, 8), 'Segment');
t/XStandoff.t:84:is($segs->segment($id2)->attr('start'), 5, 'Segment');
t/XStandoff.t:85:is($segs->segment($id2)->attr('end'), 8, 'Segment');
t/XStandoff.t:87:ok(my $id3 = $segs->segment(9, 13), 'Segment');
t/XStandoff.t:89:is($segs->segment($id3)->attr('start'), 9, 'Segment');
t/XStandoff.t:90:is($segs->segment($id3)->attr('end'), 13, 'Segment');
t/XStandoff.t:92:is($segs->segment($id1)->segment_content, 'Dies', 'Correct substring');
t/XStandoff.t:93:is($segs->segment($id2)->segment_content, 'ist', 'Correct substring');
t/XStandoff.t:94:is($segs->segment($id3)->segment_content, 'mein', 'Correct substring');
t/XStandoff.t:97:ok(my $id4 = $segs->segment(14, 18), 'Segment');
t/XStandoff.t:99:is($segs->segment($id4)->segment_content, 'Text', 'Correct substring');
t/XStandoff.t:101:ok(my $id5 = $segs->segment(0, 19), 'All Segment');
t/XStandoff.t:103:is($segs->segment($id5)->segment_content, 'Dies ist mein Text.',
t/XStandoff.t:106:is($segs->segment($id2)->segment_content(
t/XStandoff.t:111:is($pd->textual_content, 'Dies IST mein Text.', 'Get textual content');
t/XStandoff.t:113:is($segs->segment($id2)->segment_content(
t/XStandoff.t:118:is($segs->segment($id3)->segment_content, 'mein', 'Correct substring');
t/XStandoff.t:120:is($segs->segment($id3)->attr('start'), 10, 'Segment');
t/XStandoff.t:121:is($segs->segment($id3)->attr('end'), 14, 'Segment');
t/XStandoff.t:124:is($segs->segment($id3)->attr('start'), 10, 'Segment');
t/XStandoff.t:125:is($segs->segment($id3)->attr('end'), 14, 'Segment');
t/XStandoff.t:127:is($segs->segment($id5)->segment_content, 'Dies wäre mein Text.',
t/XStandoff.t:131:my $data = b($FindBin::Bin . '/files/text.txt')->slurp;
t/XStandoff.t:135:ok(b($pd->textual_content)->spurt($file_name), 'Save file');
t/XStandoff.t:137:ok($pd->textual_content(uri => $file_name), 'Set textual content');
t/XStandoff.t:140:is($pd->at('primaryDataRef')->attr('uri'), $file_name, 'PrimaryDataRef');
t/XStandoff.t:142:is($segs->segment($id1)->attr('start'), 0, 'Segment');
t/XStandoff.t:143:is($segs->segment($id1)->attr('end'), 4, 'Segment');
t/XStandoff.t:146:is($cd->segment($id1)->segment_content, 'Dies', 'Correct substring');
t/XStandoff.t:147:is($cd->segment($id2)->segment_content, 'wäre', 'Correct substring');
t/XStandoff.t:148:is($cd->segment($id3)->segment_content, 'mein', 'Correct substring');
t/XStandoff.t:149:is($cd->segment($id4)->segment_content, 'Text', 'Correct substring');
t/XStandoff.t:152:ok($pd->segment($id1)->segment_content('Das'), 'Change on disk');
t/XStandoff.t:154:is($cd->segment($id1)->segment_content, 'Das', 'Correct substring');
t/XStandoff.t:155:is($cd->segment($id2)->segment_content, 'wäre', 'Correct substring');
t/XStandoff.t:156:is($cd->segment($id3)->segment_content, 'mein', 'Correct substring');
t/XStandoff.t:157:is($cd->segment($id4)->segment_content, 'Text', 'Correct substring');
t/XStandoff.t:159:is($pd->textual_content, 'Das wäre mein Text.', 'Disk data');
t/XStandoff.t:162:# diag $corpus->to_pretty_xml;
t/XStandoff.t:171:# diag $corpus->to_pretty_xml;
t/Morphemes.t:7:ok(my $morph = XML::Loy::Example::Morphemes->new('morph'), 'New morpheme doc');
t/Morphemes.t:9:ok(my $morphemes = $morph->morphemes, 'Morphemes');
t/Morphemes.t:11:ok($morphemes->morpheme, 'Add new morpheme');
t/Morphemes.t:13:is($morph->to_xml, '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><morph xmlns="http://www.xstandoff.net/morphemes" xmlns:loy="http://sojolicio.us/ns/xml-loy"><morphemes><morpheme /></morphemes></morph>', 'XML');
MYMETA.yml:1:---
MYMETA.yml:4:  - 'Nils Diewald'
MYMETA.yml:13:meta-spec:
MYMETA.yml:14:  url: http://module-build.sourceforge.net/META-spec-v1.4.html
MYMETA.yml:16:name: XML-Loy-XStandoff
MYMETA.yml:19:    - t
MYMETA.yml:20:    - inc
MYMETA.yml:29:  license: http://www.opensource.org/licenses/artistic-license-2.0
MYMETA.yml:30:  repository: https://github.com/Akron/XML-Loy-XStandoff
Makefile:19:#     META_MERGE => { resources=>{ repository=>q[https://github.com/Akron/XML-Loy-XStandoff], license=>q[http://www.opensource.org/licenses/artistic-license-2.0] }, requires=>{ perl=>q[5.010001] } }
Makefile:27:# --- MakeMaker post_initialize section:
Makefile:30:# --- MakeMaker const_config section:
Makefile:36:CCCDLFLAGS = -fPIC
Makefile:37:CCDLFLAGS = -Wl,--enable-new-dtags -Wl,-rpath,/usr/lib64/perl5/CORE
Makefile:43:LDDLFLAGS = -shared -O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic
Makefile:44:LDFLAGS =  -fstack-protector
Makefile:49:OSVERS = 2.6.32-279.9.1.el6.x86_64
Makefile:58:# --- MakeMaker constants section:
Makefile:67:DEFINE_VERSION = -D$(VERSION_MACRO)=\"$(VERSION)\"
Makefile:70:XS_DEFINE_VERSION = -D$(XS_VERSION_MACRO)=\"$(XS_VERSION)\"
Makefile:135:PERLRUNINST = $(PERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
Makefile:136:FULLPERLRUNINST = $(FULLPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
Makefile:137:ABSPERLRUNINST = $(ABSPERLRUN) "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"
Makefile:232:# --- MakeMaker platform_constants section:
Makefile:234:PERL_MALLOC_DEF = -DPERL_EXTMALLOC_DEF -Dmalloc=Perl_malloc -Dfree=Perl_mfree -Drealloc=Perl_realloc -Dcalloc=Perl_calloc
Makefile:237:# --- MakeMaker tool_autosplit section:
Makefile:239:AUTOSPLITFILE = $(ABSPERLRUN)  -e 'use AutoSplit;  autosplit($$$$ARGV[0], $$$$ARGV[1], 0, 1, 1)' --
Makefile:243:# --- MakeMaker tool_xsubpp section:
Makefile:246:# --- MakeMaker tools_other section:
Makefile:253:RM_F = rm -f
Makefile:254:RM_RF = rm -rf
Makefile:255:TEST_F = test -f
Makefile:259:MKPATH = $(ABSPERLRUN) -MExtUtils::Command -e 'mkpath' --
Makefile:260:EQUALIZE_TIMESTAMP = $(ABSPERLRUN) -MExtUtils::Command -e 'eqtime' --
Makefile:264:ECHO_N = echo -n
Makefile:267:MOD_INSTALL = $(ABSPERLRUN) -MExtUtils::Install -e 'install([ from_to => {@ARGV}, verbose => '\''$(VERBINST)'\'', uninstall_shadows => '\''$(UNINST)'\'', dir_mode => '\''$(PERM_DIR)'\'' ]);' --
Makefile:268:DOC_INSTALL = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'perllocal_install' --
Makefile:269:UNINSTALL = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'uninstall' --
Makefile:270:WARN_IF_OLD_PACKLIST = $(ABSPERLRUN) -MExtUtils::Command::MM -e 'warn_if_old_packlist' --
Makefile:273:USEMAKEFILE = -f
Makefile:274:FIXIN = $(ABSPERLRUN) -MExtUtils::MY -e 'MY->fixin(shift)' --
Makefile:277:# --- MakeMaker makemakerdflt section:
Makefile:282:# --- MakeMaker dist section:
Makefile:286:ZIPFLAGS = -r
Makefile:287:COMPRESS = gzip --best
Makefile:293:CI = ci -u
Makefile:294:RCS_LABEL = rcs -Nv$(VERSION_SYM): -q
Makefile:297:DISTNAME = XML-Loy-XStandoff
Makefile:298:DISTVNAME = XML-Loy-XStandoff-0.3
Makefile:301:# --- MakeMaker macro section:
Makefile:304:# --- MakeMaker depend section:
Makefile:307:# --- MakeMaker cflags section:
Makefile:310:# --- MakeMaker const_loadlibs section:
Makefile:313:# --- MakeMaker const_cccmd section:
Makefile:316:# --- MakeMaker post_constants section:
Makefile:319:# --- MakeMaker pasthru section:
Makefile:326:# --- MakeMaker special_targets section:
Makefile:333:# --- MakeMaker c_o section:
Makefile:336:# --- MakeMaker xs_c section:
Makefile:339:# --- MakeMaker xs_o section:
Makefile:342:# --- MakeMaker top_targets section:
Makefile:360:# --- MakeMaker blibdirs section:
Makefile:410:# --- MakeMaker linkext section:
Makefile:416:# --- MakeMaker dlsyms section:
Makefile:419:# --- MakeMaker dynamic section:
Makefile:425:# --- MakeMaker dynamic_bs section:
Makefile:430:# --- MakeMaker dynamic_lib section:
Makefile:433:# --- MakeMaker static section:
Makefile:441:# --- MakeMaker static_lib section:
Makefile:444:# --- MakeMaker manifypods section:
Makefile:446:POD2MAN_EXE = $(PERLRUN) "-MExtUtils::Command::MM" -e pod2man "--"
Makefile:458:	$(NOECHO) $(POD2MAN) --section=3 --perm_rw=$(PERM_RW) \
Makefile:470:# --- MakeMaker processPL section:
Makefile:473:# --- MakeMaker installbin section:
Makefile:476:# --- MakeMaker subdirs section:
Makefile:480:# --- MakeMaker clean_subdirs section:
Makefile:485:# --- MakeMaker clean section:
Makefile:491:	- $(RM_F) \
Makefile:493:	  core.[0-9] $(INST_ARCHAUTODIR)/extralibs.all \
Makefile:494:	  core.[0-9][0-9] $(BASEEXT).bso \
Makefile:496:	  core.[0-9][0-9][0-9][0-9] MYMETA.yml \
Makefile:501:	  core.[0-9][0-9][0-9][0-9][0-9] *perl.core \
Makefile:504:	  core.[0-9][0-9][0-9] mon.out \
Makefile:508:	- $(RM_RF) \
Makefile:510:	- $(MV) $(FIRST_MAKEFILE) $(MAKEFILE_OLD) $(DEV_NULL)
Makefile:513:# --- MakeMaker realclean_subdirs section:
Makefile:518:# --- MakeMaker realclean section:
Makefile:521:	- $(RM_F) \
Makefile:523:	- $(RM_RF) \
Makefile:527:# --- MakeMaker metafile section:
Makefile:530:	$(NOECHO) $(ECHO) '---' > META_new.yml
Makefile:533:	$(NOECHO) $(ECHO) '  - '\''Nils Diewald'\''' >> META_new.yml
Makefile:542:	$(NOECHO) $(ECHO) 'meta-spec:' >> META_new.yml
Makefile:543:	$(NOECHO) $(ECHO) '  url: http://module-build.sourceforge.net/META-spec-v1.4.html' >> META_new.yml
Makefile:545:	$(NOECHO) $(ECHO) 'name: XML-Loy-XStandoff' >> META_new.yml
Makefile:548:	$(NOECHO) $(ECHO) '    - t' >> META_new.yml
Makefile:549:	$(NOECHO) $(ECHO) '    - inc' >> META_new.yml
Makefile:558:	$(NOECHO) $(ECHO) '  license: http://www.opensource.org/licenses/artistic-license-2.0' >> META_new.yml
Makefile:559:	$(NOECHO) $(ECHO) '  repository: https://github.com/Akron/XML-Loy-XStandoff' >> META_new.yml
Makefile:561:	-$(NOECHO) $(MV) META_new.yml $(DISTVNAME)/META.yml
Makefile:573:	$(NOECHO) $(ECHO) '   "meta-spec" : {' >> META_new.json
Makefile:577:	$(NOECHO) $(ECHO) '   "name" : "XML-Loy-XStandoff",' >> META_new.json
Makefile:610:	$(NOECHO) $(ECHO) '         "http://www.opensource.org/licenses/artistic-license-2.0"' >> META_new.json
Makefile:613:	$(NOECHO) $(ECHO) '         "url" : "https://github.com/Akron/XML-Loy-XStandoff"' >> META_new.json
Makefile:618:	-$(NOECHO) $(MV) META_new.json $(DISTVNAME)/META.json
Makefile:621:# --- MakeMaker signature section:
Makefile:623:	cpansign -s
Makefile:626:# --- MakeMaker dist_basics section:
Makefile:631:	$(PERLRUN) "-MExtUtils::Manifest=fullcheck" -e fullcheck
Makefile:634:	$(PERLRUN) "-MExtUtils::Manifest=skipcheck" -e skipcheck
Makefile:637:	$(PERLRUN) "-MExtUtils::Manifest=mkmanifest" -e mkmanifest
Makefile:644:# --- MakeMaker dist_core section:
Makefile:647:	$(NOECHO) $(ABSPERLRUN) -l -e 'print '\''Warning: Makefile possibly out of date with $(VERSION_FROM)'\''' \
Makefile:648:	  -e '    if -e '\''$(VERSION_FROM)'\'' and -M '\''$(VERSION_FROM)'\'' < -M '\''$(FIRST_MAKEFILE)'\'';' --
Makefile:680:# --- MakeMaker distdir section:
Makefile:683:	$(PERLRUN) "-MExtUtils::Manifest=manicopy,maniread" \
Makefile:684:		-e "manicopy(maniread(),'$(DISTVNAME)', '$(DIST_CP)');"
Makefile:691:# --- MakeMaker dist_test section:
Makefile:699:# --- MakeMaker dist_ci section:
Makefile:702:	$(PERLRUN) "-MExtUtils::Manifest=maniread" \
Makefile:703:	  -e "@all = keys %{ maniread() };" \
Makefile:704:	  -e "print(qq{Executing $(CI) @all\n}); system(qq{$(CI) @all});" \
Makefile:705:	  -e "print(qq{Executing $(RCS_LABEL) ...\n}); system(qq{$(RCS_LABEL) @all});"
Makefile:708:# --- MakeMaker distmeta section:
Makefile:710:	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -e q{META.yml};' \
Makefile:711:	  -e 'eval { maniadd({q{META.yml} => q{Module YAML meta-data (added by MakeMaker)}}) }' \
Makefile:712:	  -e '    or print "Could not add META.yml to MANIFEST: $$$${'\''@'\''}\n"' --
Makefile:713:	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'exit unless -f q{META.json};' \
Makefile:714:	  -e 'eval { maniadd({q{META.json} => q{Module JSON meta-data (added by MakeMaker)}}) }' \
Makefile:715:	  -e '    or print "Could not add META.json to MANIFEST: $$$${'\''@'\''}\n"' --
Makefile:719:# --- MakeMaker distsignature section:
Makefile:721:	$(NOECHO) cd $(DISTVNAME) && $(ABSPERLRUN) -MExtUtils::Manifest=maniadd -e 'eval { maniadd({q{SIGNATURE} => q{Public-key signature (added by MakeMaker)}}) } ' \
Makefile:722:	  -e '    or print "Could not add SIGNATURE to MANIFEST: $$$${'\''@'\''}\n"' --
Makefile:724:	cd $(DISTVNAME) && cpansign -s
Makefile:728:# --- MakeMaker install section:
Makefile:794:	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
Makefile:795:	-$(NOECHO) $(DOC_INSTALL) \
Makefile:805:	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
Makefile:806:	-$(NOECHO) $(DOC_INSTALL) \
Makefile:816:	-$(NOECHO) $(MKPATH) $(DESTINSTALLARCHLIB)
Makefile:817:	-$(NOECHO) $(DOC_INSTALL) \
Makefile:839:# --- MakeMaker force section:
Makefile:845:# --- MakeMaker perldepend section:
Makefile:848:# --- MakeMaker makefile section:
Makefile:852:	$(NOECHO) $(ECHO) "Makefile out-of-date with respect to $?"
Makefile:854:	-$(NOECHO) $(RM_F) $(MAKEFILE_OLD)
Makefile:855:	-$(NOECHO) $(MV)   $(FIRST_MAKEFILE) $(MAKEFILE_OLD)
Makefile:856:	- $(MAKE) $(USEMAKEFILE) $(MAKEFILE_OLD) clean $(DEV_NULL)
Makefile:864:# --- MakeMaker staticmake section:
Makefile:866:# --- MakeMaker makeaperl section ---
Makefile:881:# --- MakeMaker test section:
Makefile:887:TESTDB_SW = -d
Makefile:891:test :: $(TEST_TYPE) subdirs-test
Makefile:893:subdirs-test ::
Makefile:898:	PERL_DL_NONLAZY=1 $(FULLPERLRUN) "-MExtUtils::Command::MM" "-e" "test_harness($(TEST_VERBOSE), '$(INST_LIB)', '$(INST_ARCHLIB)')" $(TEST_FILES)
Makefile:901:	PERL_DL_NONLAZY=1 $(FULLPERLRUN) $(TESTDB_SW) "-I$(INST_LIB)" "-I$(INST_ARCHLIB)" $(TEST_FILE)
Makefile:909:# --- MakeMaker ppd section:
Makefile:922:	$(NOECHO) $(ECHO) '        <ARCHITECTURE NAME="x86_64-linux-thread-multi-5.14" />' >> $(DISTNAME).ppd
Makefile:928:# --- MakeMaker pm_to_blib section:
Makefile:931:	$(NOECHO) $(ABSPERLRUN) -MExtUtils::Install -e 'pm_to_blib({@ARGV}, '\''$(INST_LIB)/auto'\'', q[$(PM_FILTER)], '\''$(PERM_DIR)'\'')' -- \
Makefile:946:# --- MakeMaker selfdocument section:
Makefile:949:# --- MakeMaker postamble section:
