=pod

=head1 NAME

XML::Loy::XStandoff - read and Write XStandoff documents


=head1 SYNOPSIS

  use XML::Loy::XStandoff;

  # Create new corpus element
  my $xsf = XML::Loy::XStandoff->new('corpus');

  # Create new corpusData element
  my $cd = $xsf->corpus_data(id => 'cs_1');

  # Add meta information
  $cd->meta->add('dc:title' => 'My Document');

  # Set textual content
  $cd->textual_content('My text');

  # Create segment spans
  $cd->segment(0, 2);
  my $seg = $cd->segment(3, 7);

  # Return textual content based on segment spans
  print $xsf->segment_content($seg);
  # text

  # Modify primary data
  $xsf->segment_content(
    $seg => sub {
      uc $_[0];
    });

  # Return XStandoff document
  print $xsf->to_pretty_xml;

  # <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  # <corpus xmlns="http://www.xstandoff.net/2009/xstandoff/1.1"
  #         xmlns:xsf="http://www.xstandoff.net/2009/xstandoff/1.1">
  #   <corpusData xml:id="cs_1">
  #     <meta>
  #       <dc:title>My Document</dc:title>
  #     </meta>
  #     <primaryData end="7" start="0" xml:id="pd-F82533A0-...">
  #       <textualContent>My TEXT</textualContent>
  #     </primaryData>
  #     <segmentation>
  #       <segment end="2" start="0" type="char" xml:id="seg-F825B7DA-..." />
  #       <segment end="7" start="3" type="char" xml:id="seg-F82617FC-..." />
  #     </segmentation>
  #   </corpusData>
  # </corpus>

=head1 DESCRIPTION

L<XML::Loy::XStandoff> is an L<XML::Loy> class
for dealing with L<XStandoff|http://xstandoff.net/> documents.

This code may help you to create your own L<XML::Loy> extensions.

B<This module is an early release! There may be significant changes in the future.>


=head1 METHODS

L<XML::Loy::XStandoff> inherits all methods
from L<XML::Loy> and implements the following new ones.


=head2 new

  my $corpus = XML::Loy::XStandoff->new('corpus');
  my $cd = XML::Loy::XStandoff->new('corpusData');

Create a new L<XML::Loy::XStandoff> document, either as
a C<corpus> or a C<corpusData> element.


=head2 corpus_data

  $corpus->corpus_data(id => 'cd-1');
  my $cd = $corpus->corpus_data('cd-1');
  my $cd = $corpus->corpus_data;

Get or add corpus data to the corpus.
accepts a parameter hash for setting or a single id parameter for getting.
Giving no parameter will return the first corpus data node.
If no corpus data exists, a new node is introduced with an autogenerated id.

=head2 meta

  $cd->meta->

  $cd->meta(uri => '/meta.xml');
  $cd->meta(uri => 'http://.../meta.xml');
  $cd->meta(as => [-Loy, -DublinCore])->dc('Title');

Set or get meta information of the current node.
Accepts a parameter hash for setting or an

=head2 primary_data

  $cd->primary_data(uri => '/text.txt');
  $cd->primary_data(uri => 'http://.../text.txt');
  $cd->primary_data(file => '/text.txt');
  $cd->primary_data('Hello World');


=head2 textual_content

=head2 segment

  my $id = $cd->segment(4, 5);
  my $id = $cd->segment(4, 5, 'seg-1');

  my $seg = $cd->segment($id);
  print $seg->attrs('start');

=head2 segment_content

  my $content = $cd->segment_content('seg-1');
  my $content = $cd->segment_content('seg-1' => 'war');
  my $content = $cd->segment_content('seg-1' => sub {
    return lc $_[0];
  });

  my $content = $seg->segment_content;
  my $content = $seg->segment_content('war');
  my $content = $seg->segment_content(sub {
    return lc $_[0];
  });


=head2 seg

  # Add attributes to nodes
  $xml->seg('seg-4');
  print $xml->seg;

=head2 annotation

=head2 level

=head2 layer

=head1 DEPENDENCIES

L<XML::Loy>.

=head1 SEE ALSO

L<XML::Loy>, L<XStandoff.net|http://xstandoff.net/>.


=head1 AVAILABILITY

  https://github.com/Akron/XML-Loy-XStandoff


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013, L<Nils Diewald|http://nils-diewald.de/>.

This program is free software, you can redistribute it
and/or modify it under the same terms as Perl.

=cut
